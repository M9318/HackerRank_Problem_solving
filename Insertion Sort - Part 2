/*In Insertion Sort Part 1, you inserted one element into an array at its correct sorted position.
*Using the same approach repeatedly, can you sort an entire array?
*Guideline: You already can place an element into a sorted array.
*How can you use that code to build up a sorted array, one element at a time? Note that in the first step,
*when you consider an array with just the first element, it is already sorted since there's nothing to compare it to.
*In this challenge, print the array after each iteration of the insertion sort, i.e., whenever the next element has been inserted at its correct position. 
*Since the array composed of just the first element is already sorted, begin printing after placing the second element.*/
#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void insertionSort2(int n, int* arr) {
    int i, j, k, temp;
    for( j = 1 ; j < n  ; j++){
        for( k = j ; k >= 0 ; k--){
            if(arr[k] < arr[k - 1]){
                temp = arr[k];
                arr[k] = arr[k-1];
                arr[k-1] = temp;
            }
            }
            
            for( i = 0 ; i < n ; i++){
                printf("%d ",arr[i]);
                }  
                printf("\n"); 
                }           
}

int main(){
    int n, i, size  = 10000, arr[size];
    scanf("%d", &n);
    for( i = 0 ; i < n ; i++){
        scanf("%d", &arr[i]);
    }
    insertionSort2(n,arr);
    return 0 ;
}
