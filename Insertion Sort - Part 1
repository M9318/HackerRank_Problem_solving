/*Sorting
 *One common task for computers is to sort data. For example, people might want to see all their files on a computer sorted by size. 
 *Since sorting is a simple problem with many different possible solutions, it is often used to introduce the study of algorithms.
 *Insertion Sort
 *These challenges will cover Insertion Sort, a simple and intuitive sorting algorithm. We will first start with a nearly sorted list.
 *Insert element into sorted list
 *Given a sorted list with an unsorted number e in the rightmost cell, can you write some simple code to insert e into the array so that it remains sorted?
 *Since this is a learning exercise, it won't be the most efficient way of performing the insertion. It will instead demonstrate the brute-force method in detail.*/
#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void insertionSort1(int n, int* arr) {
    int i, j, k, temp;
    temp = arr[n-1];
    for( j = n -2 ; j >= 0  ; j--){
            if(temp < arr[j]){
                arr[j+1] = arr[j];
                for( i = 0 ; i < n ; i++){
                    printf("%d ",arr[i]);
                    }
                    printf("\n"); 
                    if ( temp > arr[j - 1]){
                        arr[j] = temp;
                        for( i = 0 ; i < n ; i++){
                            printf("%d ",arr[i]);
                            }
                            break;
                            } 
                            }   
                            }          
                            }

int main(){
    int n, i, size  = 10000, arr[size];
    scanf("%d", &n);
    for( i = 0 ; i < n ; i++){
        scanf("%d", &arr[i]);
    }
    insertionSort1(n,arr);
    return 0 ;
}
